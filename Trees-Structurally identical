Given two Generic trees, return true if they are structurally identical i.e. they are made of nodes with the same values arranged in the same way.
Input format :

Line 1 : Tree 1 elements in level order form separated by space (as per done in class). Order is -

Root_data, n (No_Of_Child_Of_Root), n children, and so on for every element

Line 2 : Tree 2 elements in level order form separated by space (as per done in class). Order is -

Root_data, n (No_Of_Child_Of_Root), n children, and so on for every element

Output format : true or false

Sample Input 1 :
10 3 20 30 40 2 40 50 0 0 0 0 
10 3 20 30 40 2 40 50 0 0 0 0
Sample Output 1 :
true
Sample Input 2 :
10 3 20 30 40 2 40 50 0 0 0 0 
10 3 2 30 40 2 40 50 0 0 0 0
Sample Output 2:
false

********************************Solution********************************

import java.util.*;

public static boolean checkIdentical(TreeNode<Integer> root1, TreeNode<Integer> root2){

		ArrayList<Integer> temp=new ArrayList<>();
    temp=storeNode(root1,temp);

    ArrayList<Integer> temp1=new ArrayList<>();
    temp1=storeNode(root2,temp1);

		if(temp.size()>temp1.size() || temp.size()<temp1.size())
			return false;
		else{
			for(int i=0;i<temp.size();i++)
			{
				if(temp.get(i)!=temp1.get(i))
					return false;
			}
			return true;
		}
	}
  
	private static ArrayList<Integer> storeNode(TreeNode<Integer> root, ArrayList<Integer> temp)
	{
		temp.add(root.data);
		for(int i=0;i<root.children.size();i++)
			storeNode(root.children.get(i), temp);

		return temp;
	}
	
