Given a tree, find and return the node for which sum of data of all children and the node itself is maximum. In the sum, data of node itself and data of immediate children is to be taken.
Input format :

Line 1 : Elements in level order form separated by space (as per done in class). Order is -

Root_data, n (No_Of_Child_Of_Root), n children, and so on for every element

Output format : Node with maximum sum.

Sample Input 1 :
5 3 1 2 3 1 15 2 4 5 1 6 0 0 0 0
Sample Output 1 :
1

**************************Solution************************

import java.util.*;

static class Pair{
		TreeNode<Integer> node;
		int sum;

		Pair(TreeNode<Integer> node, int sum)
		{
			this.node=node;
			this.sum=sum;
		}
	}
  
	private static ArrayList<Pair> temp=new ArrayList<>();
  private static int maxSum=Integer.MIN_VALUE;
  private static Pair maxPair;
  
	private  static Pair maxPair(TreeNode<Integer> root){
		
		int all=root.data;
        
        for(int i=0;i<root.children.size();i++)
        {
            all=all+root.children.get(i).data;
        }
        
        Pair ans=new Pair(root,all);
        temp.add(ans);

		    for(int i=0;i<root.children.size();i++)
        {
            maxPair(root.children.get(i));
        }
        
        for(int i=0;i<temp.size();i++)
        {
            if(temp.get(i).sum>maxSum)
            {
                maxSum=temp.get(i).sum;
                maxPair=temp.get(i);
            }
        }
        return maxPair;
		
	}
  
	public static TreeNode<Integer> maxSumNode(TreeNode<Integer> root)
	{
		Pair ans=maxPair(root);
        return ans.node;
	}
