Given a generic tree, find and return the node with second largest value in given tree. Return NULL if no node with required value is present.
Input format :
Elements in level order form separated by space (as per done in class). Order is - 

Root_data, n (No_Of_Child_Of_Root), n children, and so on for every element 
Output format:
Second Largest node data
Sample Input 1 :
10 3 20 30 40 2 40 50 0 0 0 0 
Sample Output 1 :
40

**************************Solution****************************

private static TreeNode<Integer> largest=new TreeNode<>(Integer.MIN_VALUE);
private static TreeNode<Integer> secLargest=new TreeNode<>(Integer.MIN_VALUE);

public static TreeNode<Integer> findSecondLargest(TreeNode<Integer> root){

		if(root==null)
			return null;
		
		if(root.data>largest.data)
		{
			if(largest.data!=Integer.MIN_VALUE)
			{
				secLargest=largest;
			}
			largest=root;
		}
		else if(root.data>secLargest.data && root.data<largest.data)
		{
			secLargest=root;
		}

		for(int i=0;i<root.children.size();i++)
		{
			findSecondLargest(root.children.get(i));
		}
		return secLargest;

	}
